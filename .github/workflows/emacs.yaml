name: Build Emacs
on:
  schedule:
    - cron: '0 0 * * *' # run every day at midnight
      
jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout emacs source
        uses: actions/checkout@v2
        with:
          repository: emacs-mirror/emacs
          ref: master # or any other branch/tag you want to build from
      - name: Install Nix
        uses: cachix/install-nix-action@v13
      - name: Install cachix
        run: nix-env -iA cachix -f https://cachix.org/api/v1/install
      - name: Use nix-emacs-ci binaries
        run: cachix use nix-emacs-ci 
      - name: Build Emacs for macOS
        run: curl https://raw.githubusercontent.com/jimeh/build-emacs-for-macos/master/build-emacs | bash /dev/stdin --git-sha HEAD --git-tag nightly --no-upload --no-notarize --no-dmg --zip-only 
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.1.4 # This step creates a Release in the GitHub UI.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions; you do not need to create your own token.
        with:
          tag_name: nightly-${{ github.run_number }}
          release_name: Nightly Build ${{ github.run_number }}
          draft: false # This step will create releases that are published immediately. Change this value if you want draft releases instead.
          prerelease: true # This step will create pre-releases. Change this value if you want regular releases instead.
      - name: Upload Release Asset # This step uploads the zip file created earlier as an asset for the release created above.
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.2 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          upload_url:${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above; referencing its ID to get its outputs object; which has an upload_url property within it. This upload_url will be used to upload assets via API calls later in this action.
          asset_path:${{ github.workspace }}/result.zip # The path to our zip file that we created earlier in this job; which was generated by our previous build step where we ran jimeh/build-emacs-for-macos script on our checked out git repository source code. The path is relative to where this job is being run; which is our workspace directory (which defaults to /home/runner/work/<repo-name>/<repo-name>).
          asset_name:result.zip # The name of our asset that will be uploaded; which will be available under "Assets" section of our release page when it's published on GitHub UI later in this job after this action runs through successfully without any errors/failures/issues etc.; along with any other assets we may have added here too (if any).
          asset_content_type:'application/zip' # The content-type of our asset that we're uploading; which tells GitHub what kind of data it should expect for this particular asset/file/etc.; so it knows how best handle/display/etc.; it accordingly based on its type/content/format/etc.; when users view/download/etc.; it later via GitHub UI
